var config = require('../config'),
    fs = require('fs.extra'),
    path = require('path'),
    rc = require('rc'),
    knox = require('knox'),
    Q = require('q'),
    URL = require('url'),
    tar = require('tar-fs');

var s3Conf = rc('grunt-s3-publish', {
    key: '<yourkey>',
    secret: '<yoursecret>',
    bucket: '<yourbucket>'
});

module.exports = {
    bucket: s3Conf.bucket,
    download: function(name, version, url, unpack) {
        var client = knox.createClient(s3Conf),
            deferred = Q.defer(),
            dir = path.join(config.directory, name),
            key = '/' + name + '/' + version + '.tgz';

        var filename = path.join(dir, version + '.tgz');

        console.log('Installing ' + key + ' to ' + dir);

        Q.nfcall(fs.mkdirs, dir).then(function() {
            try {
                var fileStream = fs.createWriteStream(filename);

                client.getFile(key, function(err, res) {
                    if (err) {
                        console.log(err);
                        deferred.reject(err);
                    } else {
                        res.pipe(fileStream);
                        console.log('Successfully saved ' + filename + ' to ' + key);
                        deferred.resolve();
                    }
                });
            } catch (e) {
                console.log(e);
                deferred.reject(e);
            }
        }, function(e) {
            deferred.reject(e);
        });

        return deferred.promise;
    },
    upload: function(name, version, filename) {
        var client = knox.createClient(s3Conf),
            deferred = Q.defer(),
            key = '/' + name + '/' + version + path.extname(filename);

        console.log('Publishing ' + filename + ' to ' + key);

        try {
            fs.stat(filename, function(err, stat) {
                var fileStream = fs.createReadStream(filename),
                    headers = {
                        'Content-Length': stat.size,
                        'Content-Type': 'application/x-gzip'
                    };
                client.putStream(fileStream, key, headers, function(err, res) {
                    if (err) {
                        console.log(err);
                        deferred.reject(err);
                    } else {
                        console.log('Successfully saved ' + filename + ' to ' + key);
                        deferred.resolve(client.https(key));
                    }
                });
            });
        } catch (e) {
            console.log(e);
            deferred.reject(e);
        }

        return deferred.promise;
    }
};
