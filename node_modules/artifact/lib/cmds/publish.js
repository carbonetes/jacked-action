var endpoint = require('../endpoint'),
    fs = require('fs.extra'),
    path = require('path'),
    tar = require('tar-fs'),
    zlib = require('zlib'),
    ncp = require('ncp').ncp,
    repo = require('../repos/agService'),
    Q = require('q');

module.exports = function tarAndPublish(artifact) {
    artifact.register('publish', function(options, publishAsResolved, dir) {
        var artifactJson = options;

        if (Object.keys(artifactJson).length === 0) {
            artifactJson = require(process.cwd() + '/' + 'artifact.json');
            if (!artifactJson) {
                return Q.reject('Did not find ' + process.cwd() + '/' + 'artifact.json');
            }
        } else {
            Object.keys(artifactJson).forEach(function(key) {
                if (typeof artifactJson[key] === 'string' && artifactJson[key][0] === '[' || artifactJson[key][0] === '{') {
                    artifactJson[key] = JSON.parse(artifactJson[key]);
                }
            });
        }

        if (!dir) dir = process.cwd();

        return Q.Promise(function(resolve, reject) {
            var filename = path.normalize(process.cwd() + path.sep + 'dist.tgz');


            var stream = fs.createWriteStream(filename);


            stream.on('error', function(e) {
                reject('Encountered error while creating tar: ' + e);
            });

            stream.on('finish', function() {
                repo.upload(artifactJson.name, artifactJson.version, filename).then(function(url) {
                    artifactJson.url = url;

                    console.log('Published artifact to repo = ' + JSON.stringify(artifactJson));

                    fs.unlinkSync(filename);

                    endpoint.post(artifactJson, publishAsResolved ? {
                        "type": "resolved"
                    } : {}).then(resolve, reject);
                }, function(e) {
                    console.log(e);
                    reject(e);
                });
            });

            tar.pack(dir)
                .pipe(zlib.createGzip())
                .pipe(stream);

        });
    });
};
