var http = require('http'),
    slice = Array.prototype.slice,
    _ = require('lodash'),
    Q = require('q');

module.exports = function(url) {
    var endpoint = require('url').parse(url);

    return {
        url: function(fragments, params) {
            var parts = [endpoint.pathname];
            if (typeof fragments === 'string') {
                parts.push(fragments);
            } else if (_.isArguments(fragments)) {
                parts = parts.concat(slice.apply(fragments));
            } else if (_.isArray(fragments)) {
                parts = parts.concat(fragments);
            }

            return endpoint.protocol + '//' + endpoint.host + join(parts) + queryString(params);
        },
        get: function(fragments, params) {
            var url = this.url(fragments, params);

            return Q.promise(function(resolve, reject) {
                var req = http.get(url, responseHandler(url, resolve, reject));

                req.on('error', function(e) {
                    reject('Error: ' + url + '\n' + e);
                });
            });
        },
        post: function(data, params) {
            var url = this.url();

            return Q.promise(function(resolve, reject) {
                var options = _.extend({
                    method: 'POST'
                }, endpoint);
                options.path += queryString(params);

                var reqBody = JSON.stringify(data);

                options.headers = {
                    'Content-Type': 'application/json',
                    'Content-Length': reqBody.length
                };

                var req = http.request(options, responseHandler(url, resolve, reject));

                req.on('error', function(e) {
                    reject('Error: ' + e);
                });

                req.write(reqBody);
                req.end();
            });
        }
    };
};

function join(fragments) {
    var result = '';

    fragments = fragments || [];

    fragments.forEach(function(fragment) {
        if (result.length > 0 && result[result.length - 1] !== '/' && fragment[0] !== '/') {
            result += '/';
        }
        result += fragment;
    });

    return result;
}

function queryString(params) {
    if (!params) {
        return '';
    }

    var result = '?';

    Object.keys(params).forEach(function(key) {
        if (result[result.length - 1] !== '?') {
            result += '&';
        }
        result += key + '=' + params[key];
    });

    return result;
}

function responseHandler(url, resolve, reject) {
    return function(response) {
        var resBody = '';

        response.on('data', function(chunk) {
            resBody += chunk.toString();
        });

        response.on('end', function() {
            if (response.statusCode == 200) {
                try {
                    resolve(JSON.parse(resBody));
                } catch (e) {
                    reject('Error: ' + url + '\n' + e);
                }
            } else {
                reject('Error: ' + url + '\nHTTP ' + response.statusCode + ':  ' + resBody);
            }
        });
    };
}